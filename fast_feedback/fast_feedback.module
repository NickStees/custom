<?php

/**
 * Implements hook_node_view().
 */
function fast_feedback_node_view($node, $view_mode = 'full') {
  $t_args = [
    '!nid' => $node->nid,
  ];
  #krumo($node);
  $node->content['node_views'] = [
    '#markup' => t('Was this page helpful? <a href=\'#\' class=\'feedback_yes\' id=\'!nid\'>Yes</a> -or- <a href=\'#\' class=\'feedback_no\' id=\'!nid\'>No</a>', $t_args),
    '#prefix' => '<div id="feedback">',
    '#suffix' => '</div>',
    '#weight' => 10,
  ];
}

/**
 *
 */
function fast_feedback_return_average($node) {
  // global $user; //so we can get uid of user
  //
  // //if user not logged in set as zero
  // if(!user_is_logged_in()){
  //   $node->uid = 0;
  // }

  // //only when looking at the full version, NOT the teaser
  // if ($view_mode == 'full') {


    // Everytime a node is viewed, increment the node_views count
    // in the demo 2 by one and include the result in the node content
    //
    // Get record
    //krumo($node);
    $record = fast_feedback_get_record($node);
    //krumo($record);

    #krumo($record);
    $feedback_scores = [];

    //sqlite_has_more ratings for page into array
    foreach ($record as $value) {
      //if($key === 'feedback'){
        $feedback_scores[] = $value->feedback;
      //  krumo ($value);
      //}
    }

    #krumo($feedback_scores);

    //get average rating of page
    $feedback_average_score = (array_sum($feedback_scores)) / count($feedback_scores);

    //increment view count
    //$record->view_count++;
    //$record->last_viewed = time();

    //set record into db
    //fast_feedback_set_record($record);

    // Set up an array of placeholders to pass to t().
    $t_args = [
      '%avg' => $feedback_average_score,
      //'%date' => date('r', $record->last_viewed),
    ];

    // return 'This page has an average rating of '.$feedback_average_score.'% ';
    drupal_json_output(array(
      'node' => $node->nid,
      'rating' => $feedback_average_score,
      'count' => count($feedback_scores)
    ));
  // }
}

/**
 *get view count
 */
function fast_feedback_get_record($node){
  //query and return view count
  $query = db_select('fast_feedback', 'ff')
    ->fields('ff')
    ->condition('nid', $node->nid);
  $record = $query->execute()->fetchAll();
  return $record;
}


/**
 * Implements hook_menu().
 */
function fast_feedback_menu() {
  $items['fast_feedback/downvote/%node'] = array(
    'page callback' => 'fast_feedback_downvote_record',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  $items['fast_feedback/upvote/%node'] = array(
    'page callback' => 'fast_feedback_upvote_record',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  return $items;
}
/**
 * Callback to record downvote for given nid.
 */
function fast_feedback_downvote_record($node) {
  $nid = db_insert('fast_feedback') // Table name no longer needs {}
  ->fields([
    'nid' => $node->nid,
    'feedback' => 0,
    'time_stamp' => REQUEST_TIME,
  ])
  ->execute();
  return fast_feedback_return_average($node);
}
/**
 * Callback to record upvote for given nid.
 */
function fast_feedback_upvote_record($node) {
  //krumo($node);
  $nid = db_insert('fast_feedback') // Table name no longer needs {}
  ->fields([
    'nid' => $node->nid,
    'feedback' => 100,
    'time_stamp' => REQUEST_TIME,
  ])
  ->execute();
  return fast_feedback_return_average($node);
}


/**
 * save view count
 */
// function fast_feedback_set_record($record){
//   //validate
//   if(!is_object($record)){
//     return watchdog('fast_feedback', 'We could not update the node view', [], WATCHDOG_ERROR);
//   }
//   //insert new record or update count in demo2
//   $query = db_merge('fast_feedback')
//   ->key(['nid' => $record->nid])
//   ->key(['uid' => $record->uid])
//   ->fields((array) $record); // cast to array from object so all keys get written to db
//   $query->execute();
// }
